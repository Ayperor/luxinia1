!!ARBvp1.0

# NORMAL Shader 
#	posinv !
#	0 light, 2 textures
#	
#	computes tangent space light direction vector
#	output color is lights1-3+ambient0

#	sunlight: point light, no attenuation	light[0]
#	fxlights: point light, attenuation 		light[1-3]
#	fogcoord: distance to eyeplane
#		tex0: texmatrix
#		tex1: cubemap coords for tangent space light vector
#
#	by Christoph Kubisch

# cause we use multi pass
OPTION ARB_position_invariant;

# Incoming vertex attributes:
ATTRIB inColor = vertex.color;
ATTRIB inPos = vertex.position;
ATTRIB inNormal = vertex.normal;
ATTRIB inTex0 = vertex.texcoord[0];
ATTRIB inTangent = vertex.attrib[14];	# tangent 

# Outgoing vertex attributes:
OUTPUT outColor = result.color;
OUTPUT outTex0 = result.texcoord[0];	# normal map coords
OUTPUT outTex1 = result.texcoord[1];	# cubemap coords

# Parameters:
PARAM lightpos =  program.local[0] ;
PARAM lightcolor = state.light[0].diffuse ;
PARAM lightambi = state.light[0].ambient ;

PARAM	lightpos1   = program.local[1];
PARAM	ambientL1	= state.light[1].ambient;
PARAM	diffuseL1	= state.light[1].diffuse;
PARAM 	lightatt1 	= state.light[1].attenuation;	# const, lin, quad, falloff exp

PARAM	lightpos2   = program.local[2];
PARAM	ambientL2	= state.light[1].ambient;
PARAM	diffuseL2	= state.light[1].diffuse;
PARAM 	lightatt2 	= state.light[1].attenuation;	# const, lin, quad, falloff exp

PARAM	lightpos3   = program.local[3];
PARAM	ambientL3	= state.light[1].ambient;
PARAM	diffuseL3	= state.light[1].diffuse;
PARAM 	lightatt3 	= state.light[1].attenuation;	# const, lin, quad, falloff exp

PARAM mtex0[]		= { state.matrix.texture[0].row[0..1] };

TEMP pos;				# Temporary pos/scalar
TEMP ldir;				# Light Direction texture space
TEMP binormal;			# Binormal
TEMP colorattr;			# colors

# Compute light direction
# pos = light vector
	SUB pos, lightpos, inPos;

# Compute Binormal
	XPD binormal, inNormal, inTangent;
	MUL binormal, binormal, -inTangent.w;
	
# Rotate light direction to TextureSpace
# ldir = light vector (TS)
	DP3 ldir.x, pos, inTangent;
	DP3 ldir.y, pos, binormal;
	DP3 ldir.z, pos, inNormal;
	# if on backside then ldir.z is negative
	# in that case clear xy directions to make sure
	# dotprod will always be 0
	SLT	ldir.w, ldir.z, 0.0;
	MUL ldir.w, ldir.w, 5.0;
	MAD ldir.z, ldir.w, ldir.z,ldir.z;
	MOV outTex1, ldir;
	
# Output Texcoords
	DP4		outTex0.x,	mtex0[0],	inTex0;
	DP4		outTex0.y,	mtex0[1],	inTex0;
	
# SECOND light
# Compute light direction
	SUB pos, lightpos1, inPos;
    DP3 binormal.w, pos, pos;     
    RSQ ldir.w, binormal.w;        
    MUL ldir.xyz, ldir.w, pos;
    
# lighting coefficients.
	DP3		ldir.x, inNormal, ldir;
	MAX		ldir.y, ldir.x, 0;
	
# Accumulate color contributions.
	MAD		binormal.xyz, ldir.y, diffuseL1, ambientL1;
	
# Distance attenuation
    #	temp = dst^2
	#	diffuseCol = 1/dst
	#   dots = 1, dst, dst^2, 1/dst
	DST	ldir, ldir.w, binormal.w;
	DP3 binormal.w, ldir, lightatt1;
	RCP	binormal.w, binormal.w;

# Output Color
	MAD	colorattr,	binormal.w, binormal, lightambi;
	
# THIRD light
# Compute light direction
	SUB pos, lightpos2, inPos;
    DP3 binormal.w, pos, pos;     
    RSQ ldir.w, binormal.w;        
    MUL ldir.xyz, ldir.w, pos;
    
# lighting coefficients.
	DP3		ldir.x, inNormal, ldir;
	MAX		ldir.y, ldir.x, 0;
	
# Accumulate color contributions.
	MAD		binormal.xyz, ldir.y, diffuseL2, ambientL2;
	
# Distance attenuation
    #	temp = dst^2
	#	diffuseCol = 1/dst
	#   dots = 1, dst, dst^2, 1/dst
	DST	ldir, ldir.w, binormal.w;
	DP3 binormal.w, ldir, lightatt2;
	RCP	binormal.w, binormal.w;

# Output Color
	MAD	colorattr,	binormal.w, binormal, lightambi;
	
# FORTH light
# Compute light direction
	SUB pos, lightpos3, inPos;
    DP3 binormal.w, pos, pos;     
    RSQ ldir.w, binormal.w;        
    MUL ldir.xyz, ldir.w, pos;
    
# lighting coefficients.
	DP3		ldir.x, inNormal, ldir;
	MAX		ldir.y, ldir.x, 0;
	
# Accumulate color contributions.
	MAD		binormal.xyz, ldir.y, diffuseL3, ambientL3;
	
# Distance attenuation
    #	temp = dst^2
	#	diffuseCol = 1/dst
	#   dots = 1, dst, dst^2, 1/dst
	DST	ldir, ldir.w, binormal.w;
	DP3 binormal.w, ldir, lightatt3;
	RCP	binormal.w, binormal.w;

# Output Color
	MAD	outColor.xyz,	binormal.w, binormal, colorattr;	
	MOV	outColor.w, inColor.w;

END
