!!ARBvp1.0

# SKIN Shader 
#	2 weight skinning, 1 sunlight,	1 effectlight, fog, 2 textures
#	
#	skinning: two weights and matrices per vertex
#	sunlight: point light, no attenuation	light[0]
#	effectlight: point light, attenuation	light[1]
#	fogcoord: distance to eyeplane
#	textures: no texgen, no texmatrix
#
#	by Christoph Kubisch

# Incoming vertex attributes:
ATTRIB inPos = vertex.position;
ATTRIB inTex0 = vertex.texcoord[0];
ATTRIB inTex1 = vertex.texcoord[1];
ATTRIB inNormal = vertex.normal;     
ATTRIB inColor = vertex.color;
ATTRIB inIndices = vertex.attrib[7];
ATTRIB inWeights = vertex.attrib[1];

# Outgoing vertex attributes:
OUTPUT outPos = result.position;
OUTPUT outColor = result.color;
OUTPUT outTex0 = result.texcoord[0];
OUTPUT outTex1 = result.texcoord[1];
OUTPUT outFog  = result.fogcoord;

PARAM  mvp[4]       = { state.matrix.mvp };
PARAM  lightpos     = program.local[0];
PARAM  ambientL		= state.light[0].ambient;
PARAM  diffuseL		= state.light[0].diffuse;

PARAM	lightpos1   = program.local[1];
PARAM	ambientL1	= state.light[1].ambient;
PARAM	diffuseL1	= state.light[1].diffuse;
PARAM 	lightatt1 	= state.light[1].attenuation;	# const, lin, quad, falloff exp

PARAM  	matrices[VID_BONESMAX]	= { program.env[0..VID_BONESLAST] };
TEMP   xfPos, xfNormal, temp, dots, ambientCol, diffuseCol,colortemp;
ADDRESS arOffset;					# Address register used to read offsets.

# WEIGHT TRANSFORMS
# get weighted matrix
	ARL		arOffset.x, inIndices.x;
	MUL		temp,		matrices[arOffset.x],	inWeights.x;
	MUL		dots,		matrices[arOffset.x+1],	inWeights.x;
	MUL		colortemp,	matrices[arOffset.x+2],	inWeights.x;
	ARL		arOffset.x, inIndices.y;
	MAD		temp,		matrices[arOffset.x],	inWeights.y,	temp;
	MAD		dots,		matrices[arOffset.x+1],	inWeights.y,	dots;
	MAD		colortemp,	matrices[arOffset.x+2],	inWeights.y,	colortemp;

# transform vert
	DP4		xfPos.x,		temp,		inPos;
	DP4		xfPos.y,		dots,		inPos;
	DP4		xfPos.z,		colortemp,	inPos;

# transform normal
	DP3		xfNormal.x,		temp,		inNormal;
	DP3		xfNormal.y,		dots,		inNormal;
	DP3		xfNormal.z,		colortemp,	inNormal;

# VIEW TRANSFORMS
# Transform the vertex to clip coordinates.
	MOV		xfPos.w,	inPos.w;
	DP4		temp.x, mvp[0], xfPos;
	DP4		temp.y, mvp[1], xfPos;
	DP4		temp.z, mvp[2], xfPos;
	DP4		temp.w, mvp[3], xfPos;
	MOV		outPos, temp;
	
# Output Fog
	ABS		outFog.x, temp.z;
	
# SUN light
# Compute light direction
	SUB temp, lightpos, xfPos;
    DP3 colortemp.w, temp, temp;     
    RSQ colortemp.w, colortemp.w;        
    MUL colortemp.xyz, colortemp.w, temp;

# Compute diffuse and specular dot products and use LIT to compute
# lighting coefficients.
	DP3		dots.x, xfNormal, colortemp;
	MAX		dots.y, dots.x, 0;

# Accumulate color contributions.
	MAD		colortemp, dots.y, diffuseL, ambientL;

# SECOND light
# Compute light direction
	SUB temp, lightpos1, xfPos;
    DP3 ambientCol.w, temp, temp;     
    RSQ diffuseCol.w, ambientCol.w;        
    MUL diffuseCol.xyz, diffuseCol.w, temp;
    # xfpos = ldir normalized
    # temp = ldir
    
# use LIT to compute
# lighting coefficients.
	DP3		dots.x, xfNormal, diffuseCol;
	MAX		dots.y, dots.x, 0;
	
# Accumulate color contributions.
	MAD		ambientCol.xyz, dots.y, diffuseL1, ambientL1;
	
# Distance attenuation
    #	temp = dst^2
	#	diffuseCol = 1/dst
	#   dots = 1, dst, dst^2, 1/dst
	DST	dots, ambientCol.w, diffuseCol.w;
	DP3 temp.w, dots, lightatt1;
	RCP	temp.w, temp.w;

	MAD	colortemp,	temp.w, ambientCol, colortemp;


# Output Color
	# combine both lights
	MUL		outColor, colortemp, inColor;
	MOV		outColor.w, inColor.w;

# Output Tex
	MOV		outTex1, inTex1;
	MOV		outTex0, inTex0;

END
